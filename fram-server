#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-only

# Board FRAM - Board Farm Remote Access Management - Server
#
# Copyright (C) 2022-2024 Glider bv
# Copyright (C) 2022 Ideas on Board

set -ef # Exit on failure, disable pathname expansion (globbing)

PATH="${HOME}/bin:/usr/bin:/bin"

BOARD=${USER}
USER=$1

# Log access early
echo "$(date +'%F %T') ${BOARD} ${USER} ${SSH_ORIGINAL_COMMAND}" >> "${BOARD}.log"

function has_cmd()
{
	type -t "$1" >& /dev/null
}

function usage()
{
	# User commands help
	cat <<END
Board FRAM - The Board Farm Remote Access Manager for ${BOARD}

Valid commands are:

    help                           This usage information
END
	has_cmd "acc-${BOARD}-on" && cat <<END
    acc [on|off|status*]           Control board accessory switch
END
	if has_cmd "power-${BOARD}-sample"; then
		sample="|sample"
	else
		filler="       "
	fi
	cat <<END
    console                        Access the board console (use "ssh -t")
    lock                           Lock the board for exclusive access
    ls                             List the boot directory contents
    power [on|off${sample}|status*]${filler}  Control board power
    release                        Release the board lock
    reset                          Reset board
    rsync                          Upload files to boot directory (use rsync)
END
	 host "${BOARD}" >& /dev/null && cat <<END
    ssh-proxy                      Open a netcat proxy path to the target
END
	cat <<END
    status                         Show board status
END
	has_cmd "wake-${BOARD}" && cat <<END
    wake                           Wake board by key
END

	has_cmd "wol-${BOARD}" && cat <<END
    wol                            Wake board through Wake-on-LAN
END

	cat <<END

Options marked with an asterisk are the default
END

	# Admin commands help
	if [[ ${ADMIN} == true ]]; then
		cat <<END

Valid admin commands are:

    logs                    View and monitor the logs
    offline [msg ...]       Make the board unavailable
    online                  Make the board available again
END
		has_cmd "setup-${BOARD}" && cat <<END
    setup <user>            Set up environment for specified user
END
		cat <<END
    shell                   Launch a shell (use "ssh -t")
    steal                   Release then immediately lock (without setup!)
    unlock                  Release the board from any lock
END
	fi

	# Show board-specific information, if available
	test -f "${BOARD}.txt" && { echo; cat "${BOARD}.txt"; }

	exit 0
}

function needs_tty()
{
	test "${SSH_TTY}" != "" || { echo "Please use ssh -t for ${SSH_ORIGINAL_COMMAND}"; exit 1; }
}

# Load board-specific definitions, if available
test -f "${BOARD}.cfg" && source "${BOARD}.cfg"

# Initialise defaults
TFTP_ROOT=${TFTP_ROOT:-/var/lib/tftpboot}
SSH_PORT=${SSH_PORT:-22}

# Handle board locking
LOCKFILE=${LOCKFILE:-/var/run/user/${UID}/.${BOARD}.lockfile}
LOCK_HOLD_TIME=${LOCK_HOLD_TIME:-3600} # seconds

function take_lock()
{
	echo "${USER}" > "${LOCKFILE}"
}

function report_lock()
{
	if [[ ! -e ${LOCKFILE} ]]; then
		echo "Board is unlocked"
		return
	fi

	LOCK_TIME="$(date -r "${LOCKFILE}" +%s)"
	LOCKUSER=$(< "${LOCKFILE}")
	UNLOCK_TIME=$((LOCK_TIME + LOCK_HOLD_TIME))

	# Lock expired
	if [[ ${UNLOCK_TIME} -lt $(date +%s) ]]; then
		echo "Board is unlocked. Last used by ${LOCKUSER} at $(date -R --date @"${LOCK_TIME}")"
		return
	fi

	echo "Board is in use by ${LOCKUSER} until $(date -R --date @"${UNLOCK_TIME}")"
}

function needs_lock()
{
	# Try to take lock
	set -C; set +e
	take_lock >& /dev/null; res=$?
	set +C; set -e

	# No lock, no problem
	if [[ ${res} -eq 0 ]]; then
		has_cmd "setup-${BOARD}" && "setup-${BOARD}" "${USER}"
		return 0
	fi

	LOCK_TIME="$(date -r "${LOCKFILE}" +%s)"
	LOCKUSER=$(< "${LOCKFILE}")

	# Have lock, no problem
	if [[ "${LOCKUSER}" == "${USER}" ]]; then
		# Refresh the timestamp
		take_lock
		return
	fi

	UNLOCK_TIME=$((LOCK_TIME + LOCK_HOLD_TIME))

	# Lock expired
	if [[ ${UNLOCK_TIME} -lt $(date +%s) ]]; then
		echo "Board lock released from ${LOCKUSER}, and now owned by ${USER}"
		take_lock
		has_cmd "setup-${BOARD}" && "setup-${BOARD}" "${USER}"
		return 0
	fi

	# Lock not expired. Call rejected
	echo -n "Operation denied: "; report_lock

	echo "$(date +'%F %T') ${BOARD} ${USER} REJECTED: Board locked by ${LOCKUSER}" >> "${BOARD}.log"
	exit 1
}

# Admin commands must be enabled explicitly by setting ADMIN_USERS
if [[ ${ADMIN_USERS} != "" ]]; then
	ADMIN=$(eval "case ${USER} in ${ADMIN_USERS// /|}) echo true ;; esac")
fi

# Deny access to non-admin users when the board is not available
if [[ -f "${BOARD}.offline" ]]; then
	case "${SSH_ORIGINAL_COMMAND}" in
	rsync*|ssh-proxy*)
		# Do not print output, so these keep on working for admin users
		;;

	*)
		echo -n "Board is not available: "
		cat "${BOARD}.offline"
		;;
	esac

	if [[ ${ADMIN} != true ]]; then
		echo "Please come back later."
		exit 1
	fi
fi

# Handle help and welcome early, as they do not need locking
case "${SSH_ORIGINAL_COMMAND}" in
	help)
		usage
		;;

	"")
		# Welcome banner
		if [[ ${ADMIN} == true ]]; then
			echo "Welcome master ${USER}, your wish is my command"
		else
			echo "Welcome ${USER}"
		fi
		exit 0
esac

# Admin commands
function parse_admin_cmd()
{
	case "$1" in
	logs)
		test $# -ne 1 || exec tail -f "${BOARD}.log"
		;;

	offline)
		shift
		test $# -ne 0 && msg="$*" || msg=offline
		echo "$msg" > "${BOARD}.offline"
		exit 0
		;;

	online)
		test $# -ne 1 || exec rm -fv "${BOARD}.offline"
		;;

	setup)
		# Optional
		if has_cmd "setup-${BOARD}"; then
			test $# -eq 2 || { echo "No user specified"; exit 1; }
			"setup-${BOARD}" "$2"
			exit 0
		fi
		;;

	shell)
		if [[ $# -eq 1 ]]; then
			needs_tty
			exec /bin/bash -l
		fi
		;;

	steal)
		if [[ $# -eq 1 ]]; then
			report_lock
			take_lock
			echo -n "Board lock stolen: "; report_lock
			exit 0
		fi
		;;

	unlock)
		if [[ $# -eq 1 ]]; then
			report_lock
			rm -f "${LOCKFILE}"
			echo "Board unlocked"
			exit 0
		fi
		;;
	esac
}

if [[ ${ADMIN} == true ]]; then
	parse_admin_cmd ${SSH_ORIGINAL_COMMAND} # Relies on word splitting
fi

# User commands
function parse_user_cmd()
{
	case "$1" in
	acc)
		# Optional
		if test $# -le 2 && has_cmd "acc-${BOARD}-on"; then
			case "$2" in
			on|1)
				needs_lock
				"acc-${BOARD}-on"
				exit 0
				;;

			off|0)
				needs_lock
				"acc-${BOARD}-off"
				exit 0
				;;

			status|"")
				"acc-${BOARD}-status"
				exit 0
				;;
			esac
		fi
		;;

	console)
		if [[ $# -eq 1 ]]; then
			needs_tty
			needs_lock
			"console-${BOARD}"
			exit 0
		fi
		;;

	lock)
		if [[ $# -eq 1 ]]; then
			needs_lock
			echo -n "Lock granted: "; report_lock
			exit 0
		fi
		;;

	ls)
		test $# -ne 1 || exec ls -lAh "${TFTP_ROOT}/${BOARD}"
		;;

	power)
		if [[ $# -le 2 ]]; then
			case "$2" in
			on|1)
				needs_lock
				"power-${BOARD}-on"
				exit 0
				;;

			off|0)
				needs_lock
				"power-${BOARD}-off"
				exit 0
				;;

			sample)
				# Optional
				if has_cmd "power-${BOARD}-sample"; then
					"power-${BOARD}-sample"
					exit 0
				fi
				;;

			status|"")
				"power-${BOARD}-status"
				exit 0
				;;
			esac
		fi
		;;

	release)
		if [[ $# -eq 1 ]]; then
			needs_lock
			rm "${LOCKFILE}"
			exit 0
		fi
		;;

	reset)
		if [[ $# -eq 1 ]]; then
			needs_lock
			"reset-${BOARD}"
			exit 0
		fi
		;;

	rsync)
		# Silence needs_lock output to prevent breaking rsync
		# Ideally we should report back failures through the rsync MOTD
		needs_lock >& /dev/null
		export SSH_ORIGINAL_COMMAND
		exec /usr/bin/rrsync -wo "${TFTP_ROOT}/${BOARD}"
		;;

	ssh-proxy)
		# Optional
		if host "${BOARD}" >& /dev/null; then
			until nc -zw 1 "${BOARD}" "${SSH_PORT}"; do sleep 1; done
			exec nc "${BOARD}" "${SSH_PORT}"
		fi
		;;

	status)
		if [[ $# -eq 1 ]]; then
			# Report the board lock status
			report_lock

			# Show board status
			power=$("power-${BOARD}-status")
			test "$power" != 1 || power=on
			test "$power" != 0 || power=off
			status="power: ${power}"

			# Optional
			if has_cmd "acc-${BOARD}-status"; then
				acc=$("acc-${BOARD}-status")
				test "$acc" != 1 || acc=on
				test "$acc" != 0 || acc=off
				status="${status} / acc: ${acc}"
			fi
			echo "${status}"
			exit 0
		fi
		;;

	wake)
		# Optional
		if test $# -eq 1 && has_cmd "wake-${BOARD}"; then
			needs_lock
			"wake-${BOARD}"
			exit 0
		fi
		;;

	wol)
		# Optional
		if test $# -eq 1 && has_cmd "wol-${BOARD}"; then
			needs_lock
			"wol-${BOARD}"
			exit 0
		fi
		;;

	command|pwd)
		# Issued by bash when completing e.g. rsync or scp commands,
		# hence ignored
		exit 0
		;;
	esac
}

parse_user_cmd ${SSH_ORIGINAL_COMMAND} # Relies on word splitting

echo "Unknown command ${SSH_ORIGINAL_COMMAND}"
exit 1
